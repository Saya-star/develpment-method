デザインパターンの種類について

デザインパターンは以下の３つのカテゴリに分類される
1.オブジェクトの生成に関するパターン
2.プログラムの構造に関するパターン
3.オブジェクトの振る舞いに関するパターン

---

1.オブジェクトの生成に関するパターン（5個）

・Abstract Factory：同じ種類のオブジェクトを集め、まとめたいときに使えるパターン
・Builder：部品となるオブジェクトが多数ある状態で、それらを組み合わせるときに適している
・Factory Method：オブジェクトを作るための仕組みを、スーパークラスで決めておけるパターン
・Prototype：既にあるオブジェクトをコピーして、新しいオブジェクトを作成できる
・Singleton：1つのクラスにつき、1つのオブジェクトを持つように決めるパターン

2.プログラムの構造に関するパターン（7個）
・Adaptor：互換性のないクラス同士を繋げられるようにするパターン
・Bridge：機能を追加するクラスと実装するクラスを分けて、その間を繋ぐ機能を持つ
・Composite：オブジェクトをツリーのように繋げていき、それぞれを独立したオブジェクトとして使えるようにする
・Decorator：新しい機能を追加するときに1つ1つ機能をかぶせていくことで、ほかのオブジェクトに変更を加えることなく、さまざまな機能を追加できる
・Facade：窓口役となるクラスを設定し、リクエストが来たら、受付のクラスがそれぞれのクラスに指示を出すようにする
・Flyweight：たくさんの小さなオブジェクトを、共有させながら読み込めるようにするパターン
・Proxy：代理の役割を持つオブジェクトに、処理をさせるパターン

3.オブジェクトの振る舞いに関するパターン（11個）
・Chain of Responsibility：
    １つのオブジェクトだけではできない処理がある場合、ほかのクラスのオブジェクトに残りの処理を渡して、実行できるようにするパターン
・Command：命令をオブジェクトとして扱うことで、さまざまなオブジェクトを組み合わせられるようにするパターン
・Interpreter：ある規則に基づいて書かれた構文をオブジェクトで表現する。そのオブジェクトを使い解析した結果に従って、処理をするパターン
・Iterator：データの最初から最後までを、順番にスキャンできるようになり、それぞれの要素を順序だててスキャンする方法を提供するためのパターン
・Mediator：たくさんのオブジェクトの処理を整理し、オブジェクト同士が直接通信する機会を減らす
・Memento：ある時点でのオブジェクトのスナップショットを撮っておき、前のオブジェクトの状態を復元できるようにするパターン
・Observer：サブジェクト（監視される側）の状態に変更があった場合、自動的にオブザーバー（監視する側）へ通知できるパターン
・State：オブジェクトの内容に変更があったときに、動作も変化させるパターン
・Strategy：状況に応じて、使用するアルゴリズムを変化させられるパターン
・Template Method：スーパークラス内でアルゴリズムのテンプレートを作成し、実際の処理内容をサブクラスに記述するパターン
・Visitor：データ構造と振る舞いを分けることが可能となる
